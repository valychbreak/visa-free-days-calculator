name: PostgreSQL Service Example
on: push

jobs:
  # Label of the runner job
  runner-job:
    # You must use a Linux environment when using service containers or container jobs
    runs-on: ubuntu-latest

    # Service containers to run with `runner-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      # Downloads a copy of the code in your repository before running CI tests
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Set up JDK 12
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Build backend
        run: ./gradlew :backend:build -x test

      - name: Migrate DB
        working-directory: ./backend
        run: ../gradlew flywayClean flywayMigrate -Dflyway.user=postgres -Dflyway.password=postgres -Dflyway.url=jdbc:postgresql://localhost:5432/postgres

      - name: Run backend app
        run: java -Dmicronaut.environments=ci -Ddatasources.default.url=${jdbc_url} -Ddatasources.default.username=${jdbc_username} -Ddatasources.default.password=${jdbc_password} "-Dcom.sun.management.jmxremote" "-Xmx128m" -jar "backend/build/libs/backend-0.1-all.jar" &
        env:
          jdbc_url: jdbc:postgresql://localhost:5432/postgres
          jdbc_username: postgres
          jdbc_password: postgres

      - name: Run E2E tests
        uses: cypress-io/github-action@v2
        env:
          NODE_ENV: test
          REACT_APP_API_URL: http://localhost:8080
        with:
          working-directory: ./frontend
          start: npm start
          # wait for all services to respond
          wait-on: 'http://localhost:8080/health, http://localhost:3000'
          config: baseUrl=http://localhost:3000

      - name: Upload screenshots
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: cypress-test-screenshots
          path: frontend/tests/e2e/cypress/screenshots

      - name: Upload videos
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: cypress-test-videos
          path: frontend/cypress/videos
